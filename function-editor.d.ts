import { LitElement, TemplateResult } from 'lit';
import '@material/mwc-dialog';
import '@material/mwc-button';
import '@material/mwc-icon-button';
import '@material/mwc-icon';
import '@material/mwc-switch';
import '@material/mwc-formfield';
import '@material/mwc-textfield';
import type { Dialog } from '@material/mwc-dialog';
import type { TextField } from '@material/mwc-textfield';
import '@openscd/oscd-tree-grid';
import type { TreeGrid } from '@openscd/oscd-tree-grid';
import '@openenergytools/filterable-lists/dist/action-list.js';
import '@openenergytools/filterable-lists/dist/selection-list.js';
import type { SelectionList, SelectItem } from '@openenergytools/filterable-lists/dist/selection-list.js';
type Input = {
    source: string;
    srcRefs: Element[];
};
type Output = {
    controlled: string;
    ctrlRefs: Element[];
};
export default class FunctionEditor9030 extends LitElement {
    function: Element;
    docs: Record<string, XMLDocument>;
    lNodeTypeSrc: {
        name: string;
        src: XMLDocument;
    }[];
    gridSize: number;
    editCount: number;
    parent?: Element;
    selectedFunc?: Element;
    lNodeForDetail?: Element;
    lNodeForCalculation?: Element;
    lnodeparent?: Element;
    selectedSourceRef?: Element;
    selectedResourceName?: Element;
    sldWidth: number;
    selectedLibName?: string;
    inputs: Input[];
    outputs: Output[];
    isControlRef: boolean;
    isSrcRefUpdate: boolean;
    linkProcRes: boolean;
    lNodeDetail: 'inputs' | 'outputs' | 'settings';
    items: SelectItem[];
    dialog: Dialog;
    daPickerDialog: Dialog;
    extRefPicker: Dialog;
    processResourceDiag: Dialog;
    daPicker: TreeGrid;
    serviceSelector?: HTMLSelectElement;
    libInput: HTMLInputElement;
    proResNameSel: HTMLSelectElement;
    proResName: TextField;
    proResName2?: TextField;
    proResSel2?: HTMLSelectElement;
    proResSelector: TextField;
    proResCardinality: TextField;
    proResMax: TextField;
    proResService: TextField;
    sldWidthDiag?: Dialog;
    lnList: SelectionList;
    private openCreateWizard;
    private openEditWizard;
    private removeFunction;
    private removeElement;
    addFunction(): void;
    addSubFunction(parent: Element): void;
    createNewLNodeElements(): void;
    openLNodeDialog(func: Element): void;
    private createSourceRefs;
    private createControlRefs;
    private saveProcessRef;
    openDoc(event: Event): Promise<void>;
    updated(changedProperties: Map<string, any>): void;
    private renderProcessResourcePicker;
    private renderDataAttributePicker;
    private renderSourceRefPicker;
    private renderExtRefPicker;
    private renderLibraryImport;
    private renderLNodeTypePicker;
    private renderLNodeDetailContent;
    private renderLNodeDetail;
    private renderSourceRef;
    private renderControlRef;
    private renderInOutPut;
    private renderLNodes;
    private renderInputs;
    private renderOutputs;
    private renderSubFunction;
    private renderFuncDetail;
    render(): TemplateResult<1>;
    static styles: import("lit").CSSResult;
}
export {};
